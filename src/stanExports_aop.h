// Generated by rstantools.  Do not edit by hand.

/*
    ordinalchange is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    ordinalchange is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with ordinalchange.  If not, see <http://www.gnu.org/licenses/>.
*/
#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#include <rstan/rstaninc.hpp>
// Code generated by Stan version 2.21.0
#include <stan/model/model_header.hpp>
namespace model_aop_namespace {
using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::prob_grad;
using namespace stan::math;
static int current_statement_begin__;
stan::io::program_reader prog_reader__() {
    stan::io::program_reader reader;
    reader.add_event(0, 0, "start", "model_aop");
    reader.add_event(55, 53, "end", "model_aop");
    return reader;
}
#include <stan_meta_header.hpp>
class model_aop
  : public stan::model::model_base_crtp<model_aop> {
private:
        int T;
        int K;
        std::vector<int> Y;
        int Period;
        double log_unif;
public:
    model_aop(stan::io::var_context& context__,
        std::ostream* pstream__ = 0)
        : model_base_crtp(0) {
        ctor_body(context__, 0, pstream__);
    }
    model_aop(stan::io::var_context& context__,
        unsigned int random_seed__,
        std::ostream* pstream__ = 0)
        : model_base_crtp(0) {
        ctor_body(context__, random_seed__, pstream__);
    }
    void ctor_body(stan::io::var_context& context__,
                   unsigned int random_seed__,
                   std::ostream* pstream__) {
        typedef double local_scalar_t__;
        boost::ecuyer1988 base_rng__ =
          stan::services::util::create_rng(random_seed__, 0);
        (void) base_rng__;  // suppress unused var warning
        current_statement_begin__ = -1;
        static const char* function__ = "model_aop_namespace::model_aop";
        (void) function__;  // dummy to suppress unused var warning
        size_t pos__;
        (void) pos__;  // dummy to suppress unused var warning
        std::vector<int> vals_i__;
        std::vector<double> vals_r__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
        try {
            // initialize data block variables from context__
            current_statement_begin__ = 2;
            context__.validate_dims("data initialization", "T", "int", context__.to_vec());
            T = int(0);
            vals_i__ = context__.vals_i("T");
            pos__ = 0;
            T = vals_i__[pos__++];
            check_greater_or_equal(function__, "T", T, 1);
            current_statement_begin__ = 3;
            context__.validate_dims("data initialization", "K", "int", context__.to_vec());
            K = int(0);
            vals_i__ = context__.vals_i("K");
            pos__ = 0;
            K = vals_i__[pos__++];
            check_greater_or_equal(function__, "K", K, 1);
            current_statement_begin__ = 4;
            validate_non_negative_index("Y", "T", T);
            context__.validate_dims("data initialization", "Y", "int", context__.to_vec(T));
            Y = std::vector<int>(T, int(0));
            vals_i__ = context__.vals_i("Y");
            pos__ = 0;
            size_t Y_k_0_max__ = T;
            for (size_t k_0__ = 0; k_0__ < Y_k_0_max__; ++k_0__) {
                Y[k_0__] = vals_i__[pos__++];
            }
            size_t Y_i_0_max__ = T;
            for (size_t i_0__ = 0; i_0__ < Y_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "Y[i_0__]", Y[i_0__], 1);
                check_less_or_equal(function__, "Y[i_0__]", Y[i_0__], K);
            }
            current_statement_begin__ = 5;
            context__.validate_dims("data initialization", "Period", "int", context__.to_vec());
            Period = int(0);
            vals_i__ = context__.vals_i("Period");
            pos__ = 0;
            Period = vals_i__[pos__++];
            check_greater_or_equal(function__, "Period", Period, 1);
            // initialize transformed data variables
            current_statement_begin__ = 9;
            log_unif = double(0);
            stan::math::fill(log_unif, DUMMY_VAR__);
            stan::math::assign(log_unif,-(stan::math::log(T)));
            // execute transformed data statements
            // validate transformed data
            // validate, set parameter ranges
            num_params_r__ = 0U;
            param_ranges_i__.clear();
            current_statement_begin__ = 13;
            num_params_r__ += 1;
            current_statement_begin__ = 14;
            num_params_r__ += 1;
            current_statement_begin__ = 15;
            num_params_r__ += 1;
            current_statement_begin__ = 16;
            num_params_r__ += 1;
            current_statement_begin__ = 17;
            num_params_r__ += 1;
            current_statement_begin__ = 18;
            validate_non_negative_index("threshold", "(K - 2)", (K - 2));
            num_params_r__ += (K - 2);
            current_statement_begin__ = 19;
            num_params_r__ += 1;
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }
    ~model_aop() { }
    void transform_inits(const stan::io::var_context& context__,
                         std::vector<int>& params_i__,
                         std::vector<double>& params_r__,
                         std::ostream* pstream__) const {
        typedef double local_scalar_t__;
        stan::io::writer<double> writer__(params_r__, params_i__);
        size_t pos__;
        (void) pos__; // dummy call to supress warning
        std::vector<double> vals_r__;
        std::vector<int> vals_i__;
        current_statement_begin__ = 13;
        if (!(context__.contains_r("A")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable A missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("A");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "A", "double", context__.to_vec());
        double A(0);
        A = vals_r__[pos__++];
        try {
            writer__.scalar_unconstrain(A);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable A: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 14;
        if (!(context__.contains_r("D")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable D missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("D");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "D", "double", context__.to_vec());
        double D(0);
        D = vals_r__[pos__++];
        try {
            writer__.scalar_unconstrain(D);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable D: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 15;
        if (!(context__.contains_r("alpha0")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable alpha0 missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("alpha0");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "alpha0", "double", context__.to_vec());
        double alpha0(0);
        alpha0 = vals_r__[pos__++];
        try {
            writer__.scalar_unconstrain(alpha0);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable alpha0: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 16;
        if (!(context__.contains_r("alpha1")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable alpha1 missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("alpha1");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "alpha1", "double", context__.to_vec());
        double alpha1(0);
        alpha1 = vals_r__[pos__++];
        try {
            writer__.scalar_unconstrain(alpha1);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable alpha1: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 17;
        if (!(context__.contains_r("Delta")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable Delta missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("Delta");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "Delta", "double", context__.to_vec());
        double Delta(0);
        Delta = vals_r__[pos__++];
        try {
            writer__.scalar_unconstrain(Delta);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable Delta: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 18;
        if (!(context__.contains_r("threshold")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable threshold missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("threshold");
        pos__ = 0U;
        validate_non_negative_index("threshold", "(K - 2)", (K - 2));
        context__.validate_dims("parameter initialization", "threshold", "vector_d", context__.to_vec((K - 2)));
        Eigen::Matrix<double, Eigen::Dynamic, 1> threshold((K - 2));
        size_t threshold_j_1_max__ = (K - 2);
        for (size_t j_1__ = 0; j_1__ < threshold_j_1_max__; ++j_1__) {
            threshold(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.ordered_unconstrain(threshold);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable threshold: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 19;
        if (!(context__.contains_r("rho")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable rho missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("rho");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "rho", "double", context__.to_vec());
        double rho(0);
        rho = vals_r__[pos__++];
        try {
            writer__.scalar_lub_unconstrain(-(1), 1, rho);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable rho: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        params_r__ = writer__.data_r();
        params_i__ = writer__.data_i();
    }
    void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream__) const {
      std::vector<double> params_r_vec;
      std::vector<int> params_i_vec;
      transform_inits(context, params_i_vec, params_r_vec, pstream__);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r(i) = params_r_vec[i];
    }
    template <bool propto__, bool jacobian__, typename T__>
    T__ log_prob(std::vector<T__>& params_r__,
                 std::vector<int>& params_i__,
                 std::ostream* pstream__ = 0) const {
        typedef T__ local_scalar_t__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // dummy to suppress unused var warning
        T__ lp__(0.0);
        stan::math::accumulator<T__> lp_accum__;
        try {
            stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
            // model parameters
            current_statement_begin__ = 13;
            local_scalar_t__ A;
            (void) A;  // dummy to suppress unused var warning
            if (jacobian__)
                A = in__.scalar_constrain(lp__);
            else
                A = in__.scalar_constrain();
            current_statement_begin__ = 14;
            local_scalar_t__ D;
            (void) D;  // dummy to suppress unused var warning
            if (jacobian__)
                D = in__.scalar_constrain(lp__);
            else
                D = in__.scalar_constrain();
            current_statement_begin__ = 15;
            local_scalar_t__ alpha0;
            (void) alpha0;  // dummy to suppress unused var warning
            if (jacobian__)
                alpha0 = in__.scalar_constrain(lp__);
            else
                alpha0 = in__.scalar_constrain();
            current_statement_begin__ = 16;
            local_scalar_t__ alpha1;
            (void) alpha1;  // dummy to suppress unused var warning
            if (jacobian__)
                alpha1 = in__.scalar_constrain(lp__);
            else
                alpha1 = in__.scalar_constrain();
            current_statement_begin__ = 17;
            local_scalar_t__ Delta;
            (void) Delta;  // dummy to suppress unused var warning
            if (jacobian__)
                Delta = in__.scalar_constrain(lp__);
            else
                Delta = in__.scalar_constrain();
            current_statement_begin__ = 18;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> threshold;
            (void) threshold;  // dummy to suppress unused var warning
            if (jacobian__)
                threshold = in__.ordered_constrain((K - 2), lp__);
            else
                threshold = in__.ordered_constrain((K - 2));
            current_statement_begin__ = 19;
            local_scalar_t__ rho;
            (void) rho;  // dummy to suppress unused var warning
            if (jacobian__)
                rho = in__.scalar_lub_constrain(-(1), 1, lp__);
            else
                rho = in__.scalar_lub_constrain(-(1), 1);
            // transformed parameters
            current_statement_begin__ = 23;
            validate_non_negative_index("cutpoints", "(K - 1)", (K - 1));
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> cutpoints((K - 1));
            stan::math::initialize(cutpoints, DUMMY_VAR__);
            stan::math::fill(cutpoints, DUMMY_VAR__);
            stan::math::assign(cutpoints,append_row(0, threshold));
            current_statement_begin__ = 24;
            validate_non_negative_index("lp", "T", T);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> lp(T);
            stan::math::initialize(lp, DUMMY_VAR__);
            stan::math::fill(lp, DUMMY_VAR__);
            // transformed parameters block statements
            current_statement_begin__ = 25;
            stan::math::assign(lp, rep_vector(log_unif, T));
            current_statement_begin__ = 27;
            for (int cp = 1; cp <= T; ++cp) {
                {
                current_statement_begin__ = 28;
                validate_non_negative_index("Z", "T", T);
                Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> Z(T);
                stan::math::initialize(Z, DUMMY_VAR__);
                stan::math::fill(Z, DUMMY_VAR__);
                current_statement_begin__ = 29;
                validate_non_negative_index("mu", "T", T);
                Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> mu(T);
                stan::math::initialize(mu, DUMMY_VAR__);
                stan::math::fill(mu, DUMMY_VAR__);
                current_statement_begin__ = 30;
                for (int t = 1; t <= T; ++t) {
                    {
                    current_statement_begin__ = 31;
                    local_scalar_t__ s(DUMMY_VAR__);
                    (void) s;  // dummy to suppress unused var warning
                    stan::math::initialize(s, DUMMY_VAR__);
                    stan::math::fill(s, DUMMY_VAR__);
                    current_statement_begin__ = 32;
                    stan::math::assign(s, ((A * stan::math::cos((((2 * stan::math::pi()) / Period) * t))) + (D * stan::math::sin((((2 * stan::math::pi()) / Period) * t)))));
                    current_statement_begin__ = 33;
                    stan::model::assign(mu, 
                                stan::model::cons_list(stan::model::index_uni(t), stan::model::nil_index_list()), 
                                (((alpha0 + (alpha1 * ((t * 1.0) / T))) + s) + (logical_gte(t, cp) ? stan::math::promote_scalar<local_scalar_t__>(Delta) : stan::math::promote_scalar<local_scalar_t__>(0) )), 
                                "assigning variable mu");
                    current_statement_begin__ = 34;
                    if (as_bool(logical_eq(t, 1))) {
                        current_statement_begin__ = 35;
                        stan::model::assign(Z, 
                                    stan::model::cons_list(stan::model::index_uni(t), stan::model::nil_index_list()), 
                                    get_base1(mu, t, "mu", 1), 
                                    "assigning variable Z");
                    } else {
                        current_statement_begin__ = 37;
                        stan::model::assign(Z, 
                                    stan::model::cons_list(stan::model::index_uni(t), stan::model::nil_index_list()), 
                                    (get_base1(mu, t, "mu", 1) + (rho * (get_base1(Z, (t - 1), "Z", 1) - get_base1(mu, (t - 1), "mu", 1)))), 
                                    "assigning variable Z");
                    }
                    current_statement_begin__ = 39;
                    stan::model::assign(lp, 
                                stan::model::cons_list(stan::model::index_uni(cp), stan::model::nil_index_list()), 
                                (get_base1(lp, cp, "lp", 1) + ordered_probit_log(get_base1(Y, t, "Y", 1), get_base1(Z, t, "Z", 1), cutpoints)), 
                                "assigning variable lp");
                    }
                }
                }
            }
            // validate transformed parameters
            const char* function__ = "validate transformed params";
            (void) function__;  // dummy to suppress unused var warning
            current_statement_begin__ = 23;
            size_t cutpoints_j_1_max__ = (K - 1);
            for (size_t j_1__ = 0; j_1__ < cutpoints_j_1_max__; ++j_1__) {
                if (stan::math::is_uninitialized(cutpoints(j_1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: cutpoints" << "(" << j_1__ << ")";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable cutpoints: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }
            current_statement_begin__ = 24;
            size_t lp_j_1_max__ = T;
            for (size_t j_1__ = 0; j_1__ < lp_j_1_max__; ++j_1__) {
                if (stan::math::is_uninitialized(lp(j_1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: lp" << "(" << j_1__ << ")";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable lp: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }
            // model body
            current_statement_begin__ = 46;
            lp_accum__.add(normal_log<propto__>(A, 0, 3));
            current_statement_begin__ = 47;
            lp_accum__.add(normal_log<propto__>(D, 0, 3));
            current_statement_begin__ = 48;
            lp_accum__.add(normal_log<propto__>(alpha0, 0, 3));
            current_statement_begin__ = 49;
            lp_accum__.add(normal_log<propto__>(alpha1, 0, 3));
            current_statement_begin__ = 50;
            lp_accum__.add(normal_log<propto__>(Delta, 0, 3));
            current_statement_begin__ = 51;
            lp_accum__.add(normal_log<propto__>(threshold, 0, 3));
            current_statement_begin__ = 52;
            lp_accum__.add(log_sum_exp(lp));
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
        lp_accum__.add(lp__);
        return lp_accum__.sum();
    } // log_prob()
    template <bool propto, bool jacobian, typename T_>
    T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
               std::ostream* pstream = 0) const {
      std::vector<T_> vec_params_r;
      vec_params_r.reserve(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        vec_params_r.push_back(params_r(i));
      std::vector<int> vec_params_i;
      return log_prob<propto,jacobian,T_>(vec_params_r, vec_params_i, pstream);
    }
    void get_param_names(std::vector<std::string>& names__) const {
        names__.resize(0);
        names__.push_back("A");
        names__.push_back("D");
        names__.push_back("alpha0");
        names__.push_back("alpha1");
        names__.push_back("Delta");
        names__.push_back("threshold");
        names__.push_back("rho");
        names__.push_back("cutpoints");
        names__.push_back("lp");
    }
    void get_dims(std::vector<std::vector<size_t> >& dimss__) const {
        dimss__.resize(0);
        std::vector<size_t> dims__;
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back((K - 2));
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back((K - 1));
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(T);
        dimss__.push_back(dims__);
    }
    template <typename RNG>
    void write_array(RNG& base_rng__,
                     std::vector<double>& params_r__,
                     std::vector<int>& params_i__,
                     std::vector<double>& vars__,
                     bool include_tparams__ = true,
                     bool include_gqs__ = true,
                     std::ostream* pstream__ = 0) const {
        typedef double local_scalar_t__;
        vars__.resize(0);
        stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
        static const char* function__ = "model_aop_namespace::write_array";
        (void) function__;  // dummy to suppress unused var warning
        // read-transform, write parameters
        double A = in__.scalar_constrain();
        vars__.push_back(A);
        double D = in__.scalar_constrain();
        vars__.push_back(D);
        double alpha0 = in__.scalar_constrain();
        vars__.push_back(alpha0);
        double alpha1 = in__.scalar_constrain();
        vars__.push_back(alpha1);
        double Delta = in__.scalar_constrain();
        vars__.push_back(Delta);
        Eigen::Matrix<double, Eigen::Dynamic, 1> threshold = in__.ordered_constrain((K - 2));
        size_t threshold_j_1_max__ = (K - 2);
        for (size_t j_1__ = 0; j_1__ < threshold_j_1_max__; ++j_1__) {
            vars__.push_back(threshold(j_1__));
        }
        double rho = in__.scalar_lub_constrain(-(1), 1);
        vars__.push_back(rho);
        double lp__ = 0.0;
        (void) lp__;  // dummy to suppress unused var warning
        stan::math::accumulator<double> lp_accum__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
        if (!include_tparams__ && !include_gqs__) return;
        try {
            // declare and define transformed parameters
            current_statement_begin__ = 23;
            validate_non_negative_index("cutpoints", "(K - 1)", (K - 1));
            Eigen::Matrix<double, Eigen::Dynamic, 1> cutpoints((K - 1));
            stan::math::initialize(cutpoints, DUMMY_VAR__);
            stan::math::fill(cutpoints, DUMMY_VAR__);
            stan::math::assign(cutpoints,append_row(0, threshold));
            current_statement_begin__ = 24;
            validate_non_negative_index("lp", "T", T);
            Eigen::Matrix<double, Eigen::Dynamic, 1> lp(T);
            stan::math::initialize(lp, DUMMY_VAR__);
            stan::math::fill(lp, DUMMY_VAR__);
            // do transformed parameters statements
            current_statement_begin__ = 25;
            stan::math::assign(lp, rep_vector(log_unif, T));
            current_statement_begin__ = 27;
            for (int cp = 1; cp <= T; ++cp) {
                {
                current_statement_begin__ = 28;
                validate_non_negative_index("Z", "T", T);
                Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> Z(T);
                stan::math::initialize(Z, DUMMY_VAR__);
                stan::math::fill(Z, DUMMY_VAR__);
                current_statement_begin__ = 29;
                validate_non_negative_index("mu", "T", T);
                Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> mu(T);
                stan::math::initialize(mu, DUMMY_VAR__);
                stan::math::fill(mu, DUMMY_VAR__);
                current_statement_begin__ = 30;
                for (int t = 1; t <= T; ++t) {
                    {
                    current_statement_begin__ = 31;
                    local_scalar_t__ s(DUMMY_VAR__);
                    (void) s;  // dummy to suppress unused var warning
                    stan::math::initialize(s, DUMMY_VAR__);
                    stan::math::fill(s, DUMMY_VAR__);
                    current_statement_begin__ = 32;
                    stan::math::assign(s, ((A * stan::math::cos((((2 * stan::math::pi()) / Period) * t))) + (D * stan::math::sin((((2 * stan::math::pi()) / Period) * t)))));
                    current_statement_begin__ = 33;
                    stan::model::assign(mu, 
                                stan::model::cons_list(stan::model::index_uni(t), stan::model::nil_index_list()), 
                                (((alpha0 + (alpha1 * ((t * 1.0) / T))) + s) + (logical_gte(t, cp) ? stan::math::promote_scalar<local_scalar_t__>(Delta) : stan::math::promote_scalar<local_scalar_t__>(0) )), 
                                "assigning variable mu");
                    current_statement_begin__ = 34;
                    if (as_bool(logical_eq(t, 1))) {
                        current_statement_begin__ = 35;
                        stan::model::assign(Z, 
                                    stan::model::cons_list(stan::model::index_uni(t), stan::model::nil_index_list()), 
                                    get_base1(mu, t, "mu", 1), 
                                    "assigning variable Z");
                    } else {
                        current_statement_begin__ = 37;
                        stan::model::assign(Z, 
                                    stan::model::cons_list(stan::model::index_uni(t), stan::model::nil_index_list()), 
                                    (get_base1(mu, t, "mu", 1) + (rho * (get_base1(Z, (t - 1), "Z", 1) - get_base1(mu, (t - 1), "mu", 1)))), 
                                    "assigning variable Z");
                    }
                    current_statement_begin__ = 39;
                    stan::model::assign(lp, 
                                stan::model::cons_list(stan::model::index_uni(cp), stan::model::nil_index_list()), 
                                (get_base1(lp, cp, "lp", 1) + ordered_probit_log(get_base1(Y, t, "Y", 1), get_base1(Z, t, "Z", 1), cutpoints)), 
                                "assigning variable lp");
                    }
                }
                }
            }
            if (!include_gqs__ && !include_tparams__) return;
            // validate transformed parameters
            const char* function__ = "validate transformed params";
            (void) function__;  // dummy to suppress unused var warning
            // write transformed parameters
            if (include_tparams__) {
                size_t cutpoints_j_1_max__ = (K - 1);
                for (size_t j_1__ = 0; j_1__ < cutpoints_j_1_max__; ++j_1__) {
                    vars__.push_back(cutpoints(j_1__));
                }
                size_t lp_j_1_max__ = T;
                for (size_t j_1__ = 0; j_1__ < lp_j_1_max__; ++j_1__) {
                    vars__.push_back(lp(j_1__));
                }
            }
            if (!include_gqs__) return;
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }
    template <typename RNG>
    void write_array(RNG& base_rng,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                     bool include_tparams = true,
                     bool include_gqs = true,
                     std::ostream* pstream = 0) const {
      std::vector<double> params_r_vec(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r_vec[i] = params_r(i);
      std::vector<double> vars_vec;
      std::vector<int> params_i_vec;
      write_array(base_rng, params_r_vec, params_i_vec, vars_vec, include_tparams, include_gqs, pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i)
        vars(i) = vars_vec[i];
    }
    std::string model_name() const {
        return "model_aop";
    }
    void constrained_param_names(std::vector<std::string>& param_names__,
                                 bool include_tparams__ = true,
                                 bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        param_name_stream__.str(std::string());
        param_name_stream__ << "A";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "D";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "alpha0";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "alpha1";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "Delta";
        param_names__.push_back(param_name_stream__.str());
        size_t threshold_j_1_max__ = (K - 2);
        for (size_t j_1__ = 0; j_1__ < threshold_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "threshold" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "rho";
        param_names__.push_back(param_name_stream__.str());
        if (!include_gqs__ && !include_tparams__) return;
        if (include_tparams__) {
            size_t cutpoints_j_1_max__ = (K - 1);
            for (size_t j_1__ = 0; j_1__ < cutpoints_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "cutpoints" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t lp_j_1_max__ = T;
            for (size_t j_1__ = 0; j_1__ < lp_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "lp" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        if (!include_gqs__) return;
    }
    void unconstrained_param_names(std::vector<std::string>& param_names__,
                                   bool include_tparams__ = true,
                                   bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        param_name_stream__.str(std::string());
        param_name_stream__ << "A";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "D";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "alpha0";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "alpha1";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "Delta";
        param_names__.push_back(param_name_stream__.str());
        size_t threshold_j_1_max__ = (K - 2);
        for (size_t j_1__ = 0; j_1__ < threshold_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "threshold" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "rho";
        param_names__.push_back(param_name_stream__.str());
        if (!include_gqs__ && !include_tparams__) return;
        if (include_tparams__) {
            size_t cutpoints_j_1_max__ = (K - 1);
            for (size_t j_1__ = 0; j_1__ < cutpoints_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "cutpoints" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t lp_j_1_max__ = T;
            for (size_t j_1__ = 0; j_1__ < lp_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "lp" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        if (!include_gqs__) return;
    }
}; // model
}  // namespace
typedef model_aop_namespace::model_aop stan_model;
#ifndef USING_R
stan::model::model_base& new_model(
        stan::io::var_context& data_context,
        unsigned int seed,
        std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}
#endif
#endif
